{"version":3,"sources":["../../dist/index.es.js","validation.js","InputText.jsx","InputRadioGroup.jsx","HooksForm.logic.js","HooksForm.jsx","index.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","TypeError","_nonIterableRest","index_es_validateInputValue","inputValue","inputValidations","map","validate","error","useFormValues","initialFormValues","_useState2","react","formValues","setFormValues","resetFormValues","resetInputValue","inputName","prevFormValues","index_es_resetInputValue","updateInputValue","event","name","type","checked","index_es_updateInputValue","setInputValue","useFormErrors","formValidations","emptyObj","_useState4","formErrors","setFormErrors","numberOfErrors","values","validateForm","inputsToValidate","updatedFormErrors","setFormValidationErrors","validateInputValue","hasOwnProperty","prevFormErrors","setInputValidationErrors","clearFormErrors","clearInputErrors","index_es_clearInputErrors","setInputErrors","required","email","test","alphanumeric","InputText","_ref","id","label","onChange","onBlur","errors","react_default","a","createElement","style","margin","htmlFor","color","padding","listStyle","index","InputRadioGroup","options","marginBottom","marginLeft","option","marginRight","submit","preventDefault","alert","HooksForm","_useFormValues","password","confirmPassword","iLoveHooks","_useFormErrors","min","minLength","value1","value2","onSubmit","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8efe0145.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n/**\n * @description Updates the value of any type of form input.\n * @param {*} event\n * @param {*} setFormValues Function from the useFormValues hook\n */\n\n\nfunction updateInputValue(event, setFormValues) {\n  var target = event.target;\n  var name = target.name;\n  var value = target.type === 'checkbox' ? target.checked : target.value;\n  setFormValues(function (prevFormValues) {\n    return _objectSpread({}, prevFormValues, _defineProperty({}, name, value));\n  });\n}\n\nfunction setFormValidationErrors(formValues, setFormErrors, formValidations) {\n  var inputsToValidate = Object.keys(formValidations);\n\n  if (inputsToValidate.length === 0) {\n    return;\n  }\n\n  var updatedFormErrors = {};\n\n  for (var i = 0; i < inputsToValidate.length; i++) {\n    var inputName = inputsToValidate[i];\n    updatedFormErrors[inputName] = validateInputValue(formValues[inputName], formValidations[inputName]);\n  }\n\n  setFormErrors(_objectSpread({}, updatedFormErrors));\n  return Object.values(updatedFormErrors).filter(function (value) {\n    return value.length > 0;\n  }).length;\n}\n\nfunction setInputValidationErrors(event, setFormErrors, formValidations) {\n  var inputName = event.target.name;\n\n  if (!formValidations.hasOwnProperty(inputName)) {\n    return;\n  }\n\n  var inputValue = event.target.value;\n  setFormErrors(function (prevFormErrors) {\n    return _objectSpread({}, prevFormErrors, _defineProperty({}, inputName, validateInputValue(inputValue, formValidations[inputName])));\n  });\n}\n/**\n * @description Validates the input value via an array of validation functions\n * @param {*} inputValue value to validate\n * @param {Array} inputValidations validation functions\n * @returns {Array} validationErrors\n */\n\n\nfunction validateInputValue(inputValue, inputValidations) {\n  var validationErrors = inputValidations.map(function (validate) {\n    return validate(inputValue);\n  }).filter(function (error) {\n    return error !== null && error !== undefined;\n  });\n  return validationErrors;\n}\n\nfunction resetInputValue(inputName, setFormValues) {\n  setFormValues(function (prevFormValues) {\n    return _objectSpread({}, prevFormValues, _defineProperty({}, inputName, ''));\n  });\n}\n\nfunction clearInputErrors(inputName, setFormErrors) {\n  setFormErrors(function (prevFormErrors) {\n    return _objectSpread({}, prevFormErrors, _defineProperty({}, inputName, []));\n  });\n}\n/**\n * @param {Object} initialFormValues\n * Where each key is the form input id,\n * and the value is the initial value of the form input.\n * @returns\n * - formValues - Object where each key is the input id and the value is the current input value.\n * - resetFormValues - Function that resets the form values to the initial state.\n * - resetInputValue - Function that resets the input value to it's initial state.\n * - updateInputValue - Function called via an event handler that updates an input value.\n * - setInputValue - Function that updates an input value.\n */\n\n\nfunction useFormValues(initialFormValues) {\n  var _useState = useState(initialFormValues),\n      _useState2 = _slicedToArray(_useState, 2),\n      formValues = _useState2[0],\n      setFormValues = _useState2[1];\n\n  return {\n    formValues: formValues,\n    resetFormValues: function resetFormValues() {\n      return setFormValues(initialFormValues);\n    },\n    resetInputValue: function resetInputValue$1(inputName) {\n      return resetInputValue(inputName, setFormValues);\n    },\n    updateInputValue: function updateInputValue$1(event) {\n      return updateInputValue(event, setFormValues);\n    },\n    setInputValue: function setInputValue(name, value) {\n      return setFormValues(function (prevFormValues) {\n        return _objectSpread({}, prevFormValues, _defineProperty({}, name, value));\n      });\n    }\n  };\n}\n/**\n * @param {Object} formValidations\n * Where each key is the form input id,\n * and the value is an array of validation functions for that form input.\n * @returns\n * - formErrors - Object where each key is the input id and the value is an array of error messages.\n * - numberOfErrors - Number of inputs that have errors.\n * - validateForm - Function that runs validation on the whole form.\n * - validateInputValue - Function that runs validation on a single input.\n * - clearFormErrors - Function that clears all the form errors.\n * - clearInputErrors - Function that clears the inputs errors.\n * - setFormErrors - Function that sets the form errors.\n * - setInputErrors - Function that sets an inputs errors.\n */\n\n\nfunction useFormErrors() {\n  var formValidations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var emptyObj = {};\n\n  var _useState3 = useState(emptyObj),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formErrors = _useState4[0],\n      setFormErrors = _useState4[1];\n\n  return {\n    formErrors: formErrors,\n    numberOfErrors: Object.values(formErrors).filter(function (value) {\n      return value.length > 0;\n    }).length,\n    validateForm: function validateForm(formValues) {\n      return setFormValidationErrors(formValues, setFormErrors, formValidations);\n    },\n    validateInputValue: function validateInputValue(event) {\n      return setInputValidationErrors(event, setFormErrors, formValidations);\n    },\n    clearFormErrors: function clearFormErrors() {\n      return setFormErrors(emptyObj);\n    },\n    clearInputErrors: function clearInputErrors$1(inputName) {\n      return clearInputErrors(inputName, setFormErrors);\n    },\n    setFormErrors: setFormErrors,\n    setInputErrors: function setInputErrors(name, value) {\n      return setFormErrors(function (prevFormErrors) {\n        return _objectSpread({}, prevFormErrors, _defineProperty({}, name, value));\n      });\n    }\n  };\n}\n\nexport { useFormErrors, useFormValues };","export function required(value) {\n  return value === null || value === undefined || value === ''\n    ? 'This field is required.'\n    : null\n}\n\nexport function email(value) {\n  return /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value) === false\n    ? 'Please enter a valid email address.'\n    : null\n}\n\nexport function minLength(value, min) {\n  return value.length < min ? `Please use ${min} or more characters.` : null\n}\n\nexport function alphanumeric(value) {\n  return !(/[a-z]/.test(value) && /[0-9]/.test(value))\n    ? 'Please use letters and numbers.'\n    : null\n}\n\nexport function passwordsMatch(value1, value2) {\n  return value1 !== value2 ? \"Passwords don't match\" : null\n}\n","import React from 'react'\nimport { string, func, arrayOf } from 'prop-types'\n\nInputText.propTypes = {\n  id: string.isRequired,\n  label: string.isRequired,\n  type: string.isRequired,\n  value: string,\n  onChange: func.isRequired,\n  onBlur: func.isRequired,\n  errors: arrayOf(string)\n}\n\nexport default function InputText({\n  id,\n  label,\n  type,\n  value,\n  onChange,\n  onBlur,\n  errors\n}) {\n  return (\n    <div style={{ margin: '20px 0' }}>\n      <label htmlFor={id}>{label}</label>\n      <br />\n      <input\n        id={id}\n        name={id}\n        type={type}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <br />\n      {errors && (\n        <ul\n          style={{\n            color: 'red',\n            margin: '8px 0',\n            padding: 0,\n            listStyle: 'none'\n          }}\n        >\n          {errors.map((error, index) => (\n            <li key={index}>- {error}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { string, func, arrayOf, shape } from 'prop-types'\n\nInputRadioGroup.propTypes = {\n  id: string.isRequired,\n  label: string.isRequired,\n  value: string,\n  onChange: func.isRequired,\n  options: arrayOf(\n    shape({ label: string.isRequired, value: string.isRequired })\n  ).isRequired,\n  errors: arrayOf(string)\n}\n\nexport default function InputRadioGroup({\n  id,\n  label,\n  value,\n  onChange,\n  options,\n  errors\n}) {\n  return (\n    <div style={{ margin: '20px 0' }}>\n      <div style={{ marginBottom: '6px' }}>{label}</div>\n      <div style={{ marginLeft: '16px' }}>\n        {options.map(option => {\n          return (\n            <span key={option.value} style={{ marginRight: '6px' }}>\n              <label htmlFor={`${id}-${option.value}`}>{option.label}</label>\n              <input\n                id={`${id}-${option.value}`}\n                name={id}\n                type=\"radio\"\n                value={option.value}\n                checked={option.value === value}\n                onChange={onChange}\n              />\n            </span>\n          )\n        })}\n      </div>\n      {errors && (\n        <ul\n          style={{\n            color: 'red',\n            margin: '8px 0',\n            padding: 0,\n            listStyle: 'none'\n          }}\n        >\n          {errors.map((error, index) => (\n            <li key={index}>- {error}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}\n","export function submit(event, setFormValidationErrors, formValues) {\n  event.preventDefault()\n\n  const numberOfFieldErrors = setFormValidationErrors(formValues)\n  if (numberOfFieldErrors > 0) {\n    return\n  }\n  signIn()\n}\n\nfunction signIn() {\n  alert('Validation successful!')\n}\n","import React from 'react'\nimport { useFormValues, useFormErrors } from '@jasperdunn/react-form-hooks'\nimport {\n  required,\n  email,\n  minLength,\n  alphanumeric,\n  passwordsMatch\n} from './validation'\nimport InputText from './InputText'\nimport InputRadioGroup from './InputRadioGroup'\nimport { submit } from './HooksForm.logic'\n\nexport default function HooksForm() {\n  const {\n    formValues,\n    updateInputValue,\n    resetFormValues,\n    resetInputValue\n  } = useFormValues({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    iLoveHooks: ''\n  })\n\n  const formValidations = {\n    email: [required, email],\n    password: [required, alphanumeric, value => minLength(value, 6)],\n    confirmPassword: [\n      required,\n      value => passwordsMatch(value, formValues.password)\n    ],\n    iLoveHooks: [required]\n  }\n\n  const {\n    formErrors,\n    numberOfErrors,\n    validateForm,\n    validateInputValue,\n    clearFormErrors,\n    clearInputErrors\n  } = useFormErrors(formValidations)\n\n  function updateAndValidateInput(event) {\n    updateInputValue(event)\n    validateInputValue(event)\n  }\n\n  function resetForm() {\n    resetFormValues()\n    clearFormErrors()\n  }\n\n  return (\n    <form\n      onSubmit={event => submit(event, validateForm, formValues, formErrors)}\n    >\n      <h1>Form with hooks</h1>\n      {numberOfErrors > 0 && (\n        <small>\n          {numberOfErrors} field{numberOfErrors !== 1 && 's'} need\n          {numberOfErrors === 1 && 's'} your attention.\n        </small>\n      )}\n      <InputText\n        id=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        value={formValues.email}\n        onChange={updateInputValue}\n        onBlur={validateInputValue}\n        errors={formErrors.email}\n      />\n      <InputText\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        value={formValues.password}\n        onChange={updateInputValue}\n        onBlur={validateInputValue}\n        errors={formErrors.password}\n      />\n      <InputText\n        id=\"confirmPassword\"\n        label=\"Confirm password\"\n        type=\"password\"\n        value={formValues.confirmPassword}\n        onChange={updateInputValue}\n        onBlur={validateInputValue}\n        errors={formErrors.confirmPassword}\n      />\n      <InputRadioGroup\n        id=\"iLoveHooks\"\n        label=\"I love hooks!\"\n        value={formValues.iLoveHooks}\n        onChange={updateAndValidateInput}\n        options={[\n          { label: 'Yes', value: 'yes' },\n          { label: 'Yes', value: 'alsoYes' }\n        ]}\n        errors={formErrors.iLoveHooks}\n      />\n      <button type=\"submit\">Create some hooks!</button>\n      <button type=\"button\" onClick={resetForm}>\n        Reset form\n      </button>\n      <button type=\"button\" onClick={() => resetInputValue('email')}>\n        Reset email\n      </button>\n      <button type=\"button\" onClick={() => clearInputErrors('email')}>\n        Clear email errors\n      </button>\n    </form>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport HooksForm from './HooksForm'\n\nfunction App() {\n  return <HooksForm />\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}